'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2, CheckCircle, XCircle, Mail, User } from 'lucide-react';

interface Step {
  id: string;
  title: string;
  status: 'pending' | 'running' | 'completed' | 'error';
  message?: string;
}

interface AccountData {
  email: string;
  password: string;
  fullName: string;
  phone?: string;
}

export default function Home() {
  const [steps, setSteps] = useState<Step[]>([
    { id: 'email', title: 'Generate Email Address', status: 'pending' },
    { id: 'phone', title: 'Get Phone Number', status: 'pending' },
    { id: 'account', title: 'Create Manus Account', status: 'pending' },
    { id: 'verify_email', title: 'Verify Email', status: 'pending' },
    { id: 'verify_phone', title: 'Verify Phone Number', status: 'pending' },
  ]);

  const [isRunning, setIsRunning] = useState(false);
  const [useRetryMode, setUseRetryMode] = useState(true);
  const [retryConfig, setRetryConfig] = useState({
    maxRetries: 5,
    timeoutMinutes: 15
  });
  const [accountData, setAccountData] = useState<AccountData | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [retryStats, setRetryStats] = useState<Record<string, unknown> | null>(null);

  const updateStep = (stepId: string, status: Step['status'], message?: string) => {
    setSteps(prev => prev.map(step => 
      step.id === stepId ? { ...step, status, message } : step
    ));
  };

  const runAutomation = async () => {
    setIsRunning(true);
    setError(null);
    setAccountData(null);
    setRetryStats(null);

    // Reset all steps
    setSteps(prev => prev.map(step => ({ ...step, status: 'pending' as const, message: undefined })));

    try {
      if (useRetryMode) {
        // Use completely free retry automation
        updateStep('email', 'running', 'Starting free retry automation...');
        
        const response = await fetch('/api/retry-automation-free', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            maxAttempts: retryConfig.maxRetries,
            timeoutMinutes: retryConfig.timeoutMinutes
          })
        });

        const result = await response.json();
        
        if (result.success) {
          // Update all steps as completed
          updateStep('email', 'completed', `Email: ${result.data.email}`);
          updateStep('phone', 'completed', `Phone: ${result.data.phoneNumber} (${result.data.service})`);
          updateStep('account', 'completed', 'Manus account created successfully');
          updateStep('verify_email', 'completed', 'Email verified');
          updateStep('verify_phone', 'completed', 'Phone verified');
          
          setAccountData({
            email: result.data.email,
            password: result.data.manusAccount?.password || 'Generated by Manus',
            fullName: result.data.manusAccount?.fullName || 'Auto Generated',
            phone: result.data.phoneNumber
          });
          
          setRetryStats(result.stats);
        } else {
          updateStep('email', 'error', result.error);
          setError(result.error);
          setRetryStats(result.stats);
        }
      } else {
        // Single attempt with free services only
        await runSingleAttemptFree();
      }
    } catch (error) {
      console.error('Automation error:', error);
      setError(error instanceof Error ? error.message : 'Unknown error occurred');
      updateStep('email', 'error', 'Automation failed');
    } finally {
      setIsRunning(false);
    }
  };

  const runSingleAttemptFree = async () => {
    try {
      // Step 1: Generate Email (using free Guerrilla Mail)
      updateStep('email', 'running', 'Generating free email address...');
      
      const emailResponse = await fetch('/api/guerrilla-mail', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({}),
      });

      const emailResult = await emailResponse.json();
      
      if (!emailResult.success) {
        updateStep('email', 'error', emailResult.error);
        return;
      }

      updateStep('email', 'completed', `Email: ${emailResult.email}`);

      // Step 2: Get Phone Number (using completely free services)
      updateStep('phone', 'running', 'Getting free phone number...');
      
      const phoneResponse = await fetch('/api/free-sms', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          preferredServices: ['receive-sms-online.info', 'sms-online.co', 'freesmsverification.com']
        }),
      });

      const phoneResult = await phoneResponse.json();
      
      if (!phoneResult.success) {
        updateStep('phone', 'error', phoneResult.error || 'All free phone services unavailable');
        return;
      }

      updateStep('phone', 'completed', `Phone: ${phoneResult.phoneNumber} (${phoneResult.service})`);

      // Step 3: Create Manus Account
      updateStep('account', 'running', 'Creating Manus account...');
      
      const manusResponse = await fetch('/api/manus', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: emailResult.email,
          phoneNumber: phoneResult.phoneNumber
        }),
      });

      const manusResult = await manusResponse.json();
      
      if (!manusResult.success) {
        updateStep('account', 'error', manusResult.error);
        return;
      }

      updateStep('account', 'completed', 'Manus account created successfully');

      // Step 4: Verify Email
      updateStep('verify_email', 'running', 'Checking for verification email...');
      
      // Wait for email to arrive
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      const emailVerifyResponse = await fetch(`/api/guerrilla-mail/${emailResult.email.split('@')[0]}`, {
        method: 'GET',
      });

      const emailVerifyResult = await emailVerifyResponse.json();
      
      if (emailVerifyResult.success) {
        updateStep('verify_email', 'completed', 'Email verified');
      } else {
        updateStep('verify_email', 'error', 'Email verification failed');
      }

      // Step 5: Verify Phone
      updateStep('verify_phone', 'running', 'Checking for SMS verification...');
      
      // Wait for SMS to arrive
      await new Promise(resolve => setTimeout(resolve, 10000));
      
      const phoneVerifyResponse = await fetch(`/api/free-sms/${phoneResult.id}`, {
        method: 'GET',
      });

      const phoneVerifyResult = await phoneVerifyResponse.json();
      
      if (phoneVerifyResult.success && phoneVerifyResult.code) {
        updateStep('verify_phone', 'completed', `SMS code: ${phoneVerifyResult.code}`);
      } else {
        updateStep('verify_phone', 'error', 'SMS verification failed');
      }

      // Set account data
      setAccountData({
        email: emailResult.email,
        password: manusResult.password || 'Generated by Manus',
        fullName: manusResult.fullName || 'Auto Generated',
        phone: phoneResult.phoneNumber
      });

    } catch (error) {
      console.error('Single attempt error:', error);
      setError(error instanceof Error ? error.message : 'Unknown error occurred');
    }
  };

  const resetSteps = () => {
    setSteps(prev => prev.map(step => ({ ...step, status: 'pending' as const, message: undefined })));
    setAccountData(null);
    setError(null);
    setRetryStats(null);
  };

  const getStepIcon = (status: Step['status']) => {
    switch (status) {
      case 'running':
        return <Loader2 className="h-4 w-4 animate-spin text-blue-500" />;
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'error':
        return <XCircle className="h-4 w-4 text-red-500" />;
      default:
        return <div className="h-4 w-4 rounded-full border-2 border-gray-300" />;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            Manus Account Automation
          </h1>
          <p className="text-lg text-gray-600">
            Automated account creation with completely free services (no API keys required!)
          </p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              Configuration
            </CardTitle>
            <CardDescription>
              Manus Invitation Code: <code className="bg-gray-100 px-2 py-1 rounded">QVDRZAYJMTKC</code>
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {/* Retry Mode Toggle */}
              <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                <div>
                  <label className="flex items-center gap-2 font-medium text-green-900">
                    <input
                      type="checkbox"
                      checked={useRetryMode}
                      onChange={(e) => setUseRetryMode(e.target.checked)}
                      disabled={isRunning}
                      className="rounded"
                    />
                    ðŸ†“ Free Retry Mode (Recommended)
                  </label>
                  <p className="text-sm text-green-700 mt-1">
                    Uses completely free services - no API keys or credits required!
                  </p>
                </div>
              </div>

              {/* Retry Configuration */}
              {useRetryMode && (
                <div className="grid grid-cols-2 gap-4 p-3 bg-gray-50 rounded-lg">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Max Attempts
                    </label>
                    <input
                      type="number"
                      min="1"
                      max="20"
                      value={retryConfig.maxRetries}
                      onChange={(e) => setRetryConfig(prev => ({ ...prev, maxRetries: parseInt(e.target.value) || 5 }))}
                      disabled={isRunning}
                      className="w-full px-3 py-1 border rounded text-sm"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Timeout (minutes)
                    </label>
                    <input
                      type="number"
                      min="5"
                      max="60"
                      value={retryConfig.timeoutMinutes}
                      onChange={(e) => setRetryConfig(prev => ({ ...prev, timeoutMinutes: parseInt(e.target.value) || 15 }))}
                      disabled={isRunning}
                      className="w-full px-3 py-1 border rounded text-sm"
                    />
                  </div>
                </div>
              )}

              <div className="flex gap-4">
                <Button 
                  onClick={runAutomation} 
                  disabled={isRunning}
                  className="flex-1 bg-green-600 hover:bg-green-700"
                >
                  {isRunning ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      {useRetryMode ? 'Running Free Retry...' : 'Running Free Automation...'}
                    </>
                  ) : (
                    useRetryMode ? 'ðŸ†“ Start Free Retry Automation' : 'ðŸ†“ Start Free Single Attempt'
                  )}
                </Button>
                <Button 
                  onClick={resetSteps} 
                  variant="outline"
                  disabled={isRunning}
                >
                  Reset
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Automation Progress</CardTitle>
            <CardDescription>
              Complete workflow using completely free services (Guerrilla Mail + 6 Free SMS Services - no API keys required!)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {steps.map((step, index) => (
                <div key={step.id} className="flex items-start gap-3">
                  <div className="flex-shrink-0 mt-1">
                    {getStepIcon(step.status)}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <span className="font-medium">{index + 1}. {step.title}</span>
                      {step.status === 'completed' && (
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">
                          Complete
                        </span>
                      )}
                      {step.status === 'error' && (
                        <span className="text-xs bg-red-100 text-red-800 px-2 py-1 rounded">
                          Error
                        </span>
                      )}
                    </div>
                    {step.message && (
                      <p className="text-sm text-gray-600 mt-1">{step.message}</p>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {error && (
          <Alert variant="destructive">
            <XCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {accountData && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <CheckCircle className="h-5 w-5 text-green-500" />
                Account Created Successfully
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium text-gray-500">Email</label>
                  <p className="font-mono text-sm bg-gray-100 p-2 rounded">{accountData.email}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Password</label>
                  <p className="font-mono text-sm bg-gray-100 p-2 rounded">{accountData.password}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">Full Name</label>
                  <p className="font-mono text-sm bg-gray-100 p-2 rounded">{accountData.fullName}</p>
                </div>
                {accountData.phone && (
                  <div>
                    <label className="text-sm font-medium text-gray-500">Phone</label>
                    <p className="font-mono text-sm bg-gray-100 p-2 rounded">{accountData.phone}</p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {retryStats && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <CheckCircle className="h-5 w-5 text-blue-500" />
                Retry Automation Statistics
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">{String(retryStats.totalAttempts || 0)}</div>
                  <div className="text-sm text-gray-500">Total Attempts</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">{String(retryStats.successfulAttempts || 0)}</div>
                  <div className="text-sm text-gray-500">Successful</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-600">{String(retryStats.failedAttempts || 0)}</div>
                  <div className="text-sm text-gray-500">Failed</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">{String(retryStats.totalTimeSeconds || 0)}s</div>
                  <div className="text-sm text-gray-500">Total Time</div>
                </div>
              </div>
              
              {retryStats.rejectionReasons && typeof retryStats.rejectionReasons === 'object' && Object.keys(retryStats.rejectionReasons).length > 0 ? (
                <div className="mt-4">
                  <h4 className="font-medium text-gray-700 mb-2">Common Rejection Reasons:</h4>
                  <div className="space-y-1">
                    {Object.entries(retryStats.rejectionReasons as Record<string, number>).map(([reason, count]) => (
                      <div key={reason} className="flex justify-between text-sm">
                        <span className="text-gray-600 truncate">{reason}</span>
                        <span className="text-gray-800 font-medium">{count}x</span>
                      </div>
                    ))}
                  </div>
                </div>
              ) : null}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

